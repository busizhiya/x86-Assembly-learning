     1 00000000 E91500                  jmp near start;跳过数据段
     2                                  ;数据段
     3                                  text:
     4 00000003 480769072C076C076F-     	db 'H',0x07,'i',0x07,',',0x07,'l',0x07,'o',0x07,'o',0x07,'p',0x07,':',0x07
     4 0000000C 076F0770073A07     
     5                                  number:
     6 00000013 00<rep 5h>              	times 5 db 0
     7                                  ;代码段
     8                                  start:
     9                                  ;准备段转移
    10                                  	;重点
    11 00000018 B8C007                  	mov word ax,0x7c0;记住了!为了简便操作,我们将段地址设为一开始的偏移地址
    12                                  	
    13                                  
    14 0000001B 8ED8                    	mov word ds,ax;源
    15                                  
    16 0000001D B800B8                  	mov word ax,0xB800
    17 00000020 8EC0                    	mov word es,ax;目标
    18                                  
    19 00000022 BE[0300]                	mov word si,text;源偏移
    20 00000025 BF0000                  	mov word di,0;目标偏移
    21 00000028 B90800                  	mov word cx,(number-text)/2;八个字
    22 0000002B FC                      	cld;正向传送
    23 0000002C F3A5                    	rep movsw;执行传送
    24                                  
    25                                  	;计算
    26 0000002E B90500                  	mov word cx,5;一共五位数,0,1,2,3,4
    27 00000031 B8[1300]                	mov word ax,number;计算number偏移的十进制数字吧
    28 00000034 BE0A00                  	mov word si,10;除数
    29 00000037 BB[1300]                	mov word bx,number;计算后存在这里
    30                                  calu:
    31 0000003A 31D2                    	xor dx,dx;清零
    32 0000003C F7F6                    	div si
    33 0000003E 8817                    	mov byte [bx],dl
    34 00000040 43                      	inc bx
    35 00000041 E2F7                    	loop calu;循环回去
    36                                  
    37 00000043 BB[1300]                	mov word bx,number;恢复bx
    38 00000046 BE0400                  	mov word si,4;偏移地址
    39                                  
    40                                  show:
    41 00000049 8A00                    	mov byte al,[bx+si];获取当前数位
    42 0000004B 0430                    	add al,0x30;加上'0'
    43 0000004D B474                    	mov byte ah,0b0_111_0_100;设置白底红色
    44                                  	;因为小端字节序,所以字符的编码在低地址,在al,属性在高地址,在ah
    45 0000004F 268905                  	mov word [es:di],ax;因为没有改变过di,所以di还是最后输出的偏移地址
    46 00000052 83C702                  	add di,2;往后两位
    47 00000055 4E                      	dec si;减一位,相当于向有移动一位
    48                                  	;一定要记住,判断条件的更改操作要在循环体的末尾!不然其他运算操作会影响的!
    49 00000056 79F1                    	jns show;只要不是负数,就继续
    50                                  
    51 00000058 E9FDFF                  	jmp near $;无限循环
    52                                  
    53 0000005B 00<rep 1A3h>            times 510-($-$$) db 0
    54 000001FE 55AA                    dw 0xAA55
    55                                  
